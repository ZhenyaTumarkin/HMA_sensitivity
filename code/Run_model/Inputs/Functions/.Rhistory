?base
################################################################################
# PREPARE PRECIPITATION MAP
#
#
#
# NEW: -ID MAP: no. 1 needs to be outside basin, real IDs starting @ no. 2
#
#
#
# Pascal Buri | High Mountain Glaciers and Hydrology |
#  Swiss Federal Institute for Forest, Snow and Landscape Research, WSL |
#  Office MG E 35 | ZÃ¼rcherstrasse 111, 8903 Birmensdorf | pascal.buri@wsl.ch
#
################################################################################
# clear entire workspace (excl. packages)
rm(list = ls())
gc()
# define actual timezone
Sys.setenv(TZ='UTC')
# Sys.setenv(TZ='Europe/Zurich')
# define &-sign for pasting string-elements
'&' <- function(...) UseMethod('&')
'&.default' <- .Primitive('&')
'&.character' <- function(...) paste(...,sep='')
#===============================================================================
# SETTINGS
#===============================================================================
## define station name
stationnm<-'Grimsel'
##define catchment name
catchnm<-'Langtang_200m'
##define name of corresponding DEM file
demfn<-'D:/T&C/RUNS/DISTRIBUTED/Test200m_GletschMet/INPUTS/dtm_Langtang_200m.mat'
##define geo-reference filename
geofn<-'D:/T&C/RUNS/DISTRIBUTED/Test200m_GletschMet/INPUTS/GEOREF_dtm_Langtang_200m.txt'
##define path to output files ("Virt_Stati...")
outpath<-'D:/T&C/RUNS/DISTRIBUTED/Test200m_GletschMet/INPUTS'
## define lon [?]/ lat [?] /elevation [m a.s.l.] of pluvio
xyz<-c(85.5695,28.2108,3862)
xyz_projec<-"+proj=longlat +ellps=WGS84"
## define name of pluvio datafiles
pluviofn<-'Meteodata/Grimsel/PROCESSEDDATA/Grimsel_MetData_1989-2011.txt'
## define Precipitation gradient file
pgfn<-'Meteodata/PrecipitationGradients_Immerzeel2014WRR.txt'
## define elevation band interval
ebi<-50 #[m]
## define elevation of Precipitation-plateau
## (above no increase in P = "plateau effect")
ebp<-5500 #[m]   ##Immerzeel2012
## define if Precipitation gradient should be inversed/decrease
## above plateau elevation (=TRUE) or should be 0 (=FALSE)
pginverse<-TRUE
# ## define x, y limits to crop DEM to [xmin,xmax,ymin,ymax]
# ##  (has to be the same limits as in "prepare_INPUT_GeoData.m")
# xylims<-c(367000,378800,3122500,3140900)
# ## define DEM name
# demfn<-'DEMs/AW3D_30m_N028E085/N028E085_AVE_DSM_crop_UTM45N.tif'
##define timesteps to trim all different datasets to
## (can be redefined in T&C-code)
initTS<-'1989-04-26 12:00:00'
finalTS<-'2011-04-14 09:00:00'
##define subseasons (for P gradient)
## Immerzeel2014 (WRR)
# define seasons [mm-dd HH:MM:SS] (year will be added later on)
# monsoon (M)
monsta<-'06-15 00:00:00'
monend<-'09-19 23:59:59'
# post-monsoon (POM)
pomsta<-'09-20 00:00:00'
pomend<-'12-31 23:59:59'
# winter (W)
winsta<-'01-01 00:00:00'
winend<-'02-28 23:59:59'
# pre-monsoon (PRM)
prmsta<-'03-01 00:00:00'
prmend<-'06-14 23:59:59'
# entire year (ALL)
allsta<-'01-01 00:00:00'
allend<-'12-31 23:59:59'
#===============================================================================
# PATHS
#===============================================================================
# detect current machine
if(Sys.getenv('computername') == 'PASCAL-THINK'){
path_gd<-'C:/Users/Pascal/Google Drive/WSL'
path_data<-'E:'
}
if(Sys.getenv('computername') == 'WSL26871'){
path_gd<-'C:/Users/buri/Google Drive/WSL'
path_data<-'D:'
}
## Path to store figures
path_fig<-path_gd&'/T&C/Figures'
## Path to functions file
path_func<-path_gd&'/T&C/Code/Functions/Functions.r'
#===============================================================================
# LOAD PACKAGES
#===============================================================================
# define packages to load
library(sp)
library(raster)
library(rgdal)
library(zoo)
library(rgl)
library(rasterVis)
library(rgeos)
library(ggplot2)      #ggplot()
library(lubridate)    #floor_date()
library(reshape2)     #melt()
library(extrafont)
library(viridis)      #scale_color_viridis()
library(R.matlab)     #readMat()
library(datetimeutils)#matlab2POS()
# define no. of digits printed in console
options('scipen'=100, 'digits'=4)
# change local time from german to english (check in sessionInfo()) for plotting
## define corresponding timezone
TZ<-'Europe/Zurich'
# TZ<-'Asia/Kathmandu'
Sys.setenv(TZ=TZ)
Sys.setlocale('LC_TIME', 'C')
#===============================================================================
# READ PLUVIOMETER DATA
#===============================================================================
source(path_func)
fn<-path_data&'/'&pluviofn
PLU<-read.table(fn,dec='.',sep='\t',header=TRUE)
PLU$Date<-matlab2POS(PLU$Date,timez=TZ) #convert matlab timestamp to POSIXct
idx<-which(second(PLU$Date) == 59)
PLU$Date[idx]<-PLU$Date[idx]+1 #add one second to remove inaccuracies
rm(idx)
# PLU$Date<-as.POSIXct(format(PLU$Date,tz='Asia/Kathmandu',usetz=TRUE))
# PLU$Date<-PLU$Date+15*60   #add 15' from timezone conversion (lost in gapfilling)
rm(fn)
##drop date gaps)
idxrm<-which(is.na(PLU$Date))
if(length(idxrm) > 0){PLU<-PLU[-idxrm,]}
rm(idxrm)
# ##drop spring timechange and other data gaps)
# # 2012-03-25 02:00:00
# # 2013-03-31 02:00:00
# # 2014-03-30 02:00:00
# # ...
# idxrm<-which(is.na(PLU$Date))
# if(length(idxrm) > 0){PLU<-PLU[-idxrm,]}
# rm(idxrm)
# ##drop autumn timechange
# # 2012-10-28 02:00:00
# # 2013-10-27 02:00:00
# # 2014-10-26 02:00:00
# # ...
# idxrm<-which(diff(PLU$Date) != 1)
# if(length(idxrm) > 0){PLU<-PLU[-idxrm,]}
# rm(idxrm)
#subset to initial timestep
idxrm<-which(PLU$Date < as.Date(initTS))
if(length(idxrm) > 0){PLU<-PLU[-idxrm,]}
PLU[1:10,'Date']
rm(idxrm)
#subset to final timestep
idxrm<-which(PLU$Date > as.Date(finalTS))
if(length(idxrm) > 0){PLU<-PLU[-idxrm,]}
PLU[nrow(PLU),'Date']
rm(idxrm)
##check for NAs, set to 0?
idx<-which(!complete.cases(PLU$Pr))
# PLU[idx,]
PLU[idx,'PVOL']<-0
#===============================================================================
# READ PRECIPITATION GRADIENT DATA
#===============================================================================
fn<-path_data&'/'&pgfn
PG_df<-read.table(fn,dec='.',sep='\t',header=TRUE)
rownames(PG_df)<-PG_df$Season
# PGv = vertical P gradient; PGh = longitudinal P gradient
#  [% m^-1]
rm(fn)
#===============================================================================
# READ TOPODATA
#===============================================================================
##load DEM
mat<-readMat(demfn)
dem<-list()
dem$x=mat[['x']][1,]
dem$y=mat[['y']][,1]
dem$z=t(mat[['DTM']])
dem<-raster(dem)
##find projection
georef<-read.csv(geofn,header=TRUE, sep=',')
projec<-make_EPSG()
projec<-projec[which(projec$code == as.numeric(georef$EPSG)),'prj4']
projection(dem)<-as.character(projec)
# dem<-raster(path_data&'/QGIS/TC_'&stationnm&'/'&demfn)
# dem<-crop(dem,extent(xylims)+30) #extent(xmin,xmax,ymin,ymax) + 0.5 cell
# dem[dem < 1]<-NA
pluvio_pt<-SpatialPoints(rbind(xyz),
proj4string=CRS(xyz_projec))
pluvio_pt<-spTransform(pluvio_pt,projection(dem))
# plot(dem)
# plot(pluvio_pt,add=T)
#===============================================================================
# CLASSIFY DEM INTO ELEVATION BANDS & DERIVE CORRESPONDING CORRECTION FACTOR
#===============================================================================
dem_pt<-rasterToPoints(dem)   #change raster to matrix object with coordinates
dem_df<-data.frame(dem_pt)    #change matrix to data.frame object
colnames(dem_df)[3]<-'z'
dem_df[which(dem_df$z == 0),'z']<-NA
#assign the DEM elevation values to elevation bands
# eb_df<-dem_df
# eb_df$z<-mroundd(eb_df$z,100)
# eb_r<-eb_df
# #create raster
# coordinates(eb_r) <- ~ x + y  #expensive!
# gridded(eb_r)<-TRUE
# eb_r<-raster(eb_r)
# > PG_df
# Season   PGv     PGh
# 1  Premonsoon 0.031 20.0004
# 2     Monsoon 0.040 20.0005
# 3 Postmonsoon 0.039  0.0022
# 4      Winter 0.053  0.0006
# 5      Annual 0.041 20.0003
## add correction per elevation band
dem_df$eb<-mroundd(dem_df$z,ebi)     #elevation band
dem_df$dz<-dem_df$z - xyz[3]         #dz from pluviometer
dem_df$dzb<-mroundd(dem_df$dz,ebi)   #dz band
## integrate plateau effect: inverse gradient above plateau-elevation ->mirroring
##  (lower dzb accordinlgy)
dzp<-ebp-mroundd(xyz[3],ebi)  #dzp: elevation difference to plateau
idx<-which(dem_df$dzb > dzp)
dem_df[idx,'dzb']<- dzp + (dzp - dem_df[idx,'dzb']) #dz band no "gradient band"
rm(idx)
dem_df$CFprm<-PG_df['Premonsoon','PGv'] * dem_df$dzb
dem_df$CFmon<-PG_df['Monsoon','PGv'] * dem_df$dzb
dem_df$CFpom<-PG_df['Postmonsoon','PGv'] * dem_df$dzb
dem_df$CFwin<-PG_df['Winter','PGv'] * dem_df$dzb
dem_df$CFann<-PG_df['Annual','PGv'] * dem_df$dzb
## create ID per elevation band: 1=NA (outside basin)
##                               2=lowest gradient band
dem_df$ID<-(dem_df$dzb + min(dem_df$dzb,na.rm=T)*-1) / ebi  + 1
dem_df$ID<-dem_df$ID+1 #lowest eb must be ID=2, ID=1 must be 0 for T&C
dem_df[which(is.na(dem_df$ID)),'ID']<-1 #for T&C: outside basin = 1
#===============================================================================
# CREATE RASTER WITH ID PER ELEVATION BAND & WRITE TO FILE
#===============================================================================
ebID_r<-dem_df[,which(colnames(dem_df) %in% c('x','y','ID'))]
